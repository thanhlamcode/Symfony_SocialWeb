{% extends 'base.html.twig' %}

{% block title %}Tin tức{% endblock %}

{% block body %}

<div class="flex h-screen w-full">
    {% include 'components/sidebar.html.twig' %}

    <style>
        html, body {
            scroll-behavior: smooth;
        }

        /* Left Part Container */
        .left-part {
            width: 100%;
            max-width: 70%; /* Đối với màn hình lớn */
            margin: 0 auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        /* Ảnh bài viết */
        .left-part .article-content img {
            width: 100%;
            height: auto;
            object-fit: cover;
            border-radius: 8px; /* Bo góc mềm mại */
            margin-bottom: 1rem;
        }

        /* Title Section */
        .left-part .title-section {
            font-size: 2rem; /* Tiêu đề lớn */
            line-height: 1.3;
            color: #1f2937; /* Màu đen đậm */
            margin-bottom: -30px;
        }

        /* Description */
        .left-part .body-medium {
            font-size: 1rem; /* Cỡ chữ cơ bản */
            line-height: 1.6;
            color: #374151; /* Màu xám đậm */
        }

        .left-part .title-small {
            font-size: 1.25rem; /* Tiêu đề nhỏ */
            line-height: 1.5;
            font-weight: bold;
        }

        /* Article Content */
        .left-part .article-content {
            font-size: 1rem;
            line-height: 1.6;
            color: #333;
        }

        .left-part .article-content h1,
        .left-part .article-content h2,
        .left-part .article-content h3,
        .left-part .article-content h4 {
            font-weight: bold;
            margin: 1rem 0;
            font-size: 28px;
        }

        .left-part .article-content p {
            margin-bottom: 1.5rem;
        }

        .left-part .article-content ul {
            list-style-type: disc;
            margin-left: 1.5rem;
            margin-bottom: 1.5rem;
        }

        figure.wp-caption.aligncenter {
            width: auto !important; /* Loại bỏ chiều rộng cố định */
            max-width: 100%; /* Đảm bảo không vượt quá kích thước màn hình */
        }

        table {
            display: block; /* Biến bảng thành khối để thêm cuộn */
            overflow-x: auto; /* Thêm thanh cuộn ngang */
            white-space: nowrap; /* Ngăn ngắt dòng nội dung bảng */
        }

        table th,
        table td {
            border: 1px solid #ddd; /* Đường viền giữa các ô */
            padding: 15px; /* Khoảng cách trong ô */
            text-align: left; /* Căn chữ sang trái */
        }

        table::before {
            content: ''; /* Tạo phần tử giả */
            display: block;
            height: 0; /* Đảm bảo không ảnh hưởng layout */
        }

        tr:hover {
            background-color: #f1f1f1; /* Đổi màu hàng khi hover */
        }

        tr:nth-child(even) {
            background-color: #f9f9f9; /* Màu nền xen kẽ */
        }

        td {
            transition: background-color 0.3s; /* Hiệu ứng chuyển đổi màu khi hover */
        }
        #editModal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 500px;
            max-width: 90%;
            background: #1f2937;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
            display: none; /* Đảm bảo ban đầu modal bị ẩn */
            z-index: 99999;
        }

        #commentModal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 600px;
            max-width: 90%;
            background: #18191A;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
            display: none; /* Ẩn modal ban đầu */
            z-index: 99999;
        }

        #commentList {
            max-height: 300px;
            overflow-y: auto;
        }

        #commentInput {
            width: 100%;
            border: none;
            background: #3A3B3C;
            padding: 10px;
            border-radius: 20px;
        }

        #sendComment {
            background: #2374E1;
            padding: 8px 15px;
            border-radius: 20px;
            color: white;
            font-weight: bold;
        }

        #comments {
            display: flex;
            flex-direction: column; /* Bình luận xếp dọc */
            gap: 8px; /* Khoảng cách giữa các bình luận */
        }

        .comment-item {
            display: flex;
            align-items: flex-start;
            background-color: #242526; /* Màu nền tối hơn */
            padding: 12px;
            border-radius: 12px;
            max-width: 100%;
            color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .comment-item img {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            margin-right: 10px;
            border: 1px solid #3A3B3C;
        }

        .comment-content {
            display: flex;
            flex-direction: column;
            flex: 1;
        }

        .comment-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: 13px;
            color: #B0B3B8;
        }

        .comment-header span {
            font-weight: bold;
            color: white;
        }

        .comment-text {
            font-size: 14px;
            margin-top: 5px;
            color: #E4E6EB;
        }

        .comment-footer {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: #B0B3B8;
            margin-top: 5px;
        }

        .comment-footer button {
            background: none;
            border: none;
            color: #B0B3B8;
            cursor: pointer;
            font-size: 12px;
            margin-right: 15px;
        }

        .comment-footer button:hover {
            color: #E4E6EB;
        }

        .comment-footer i {
            margin-right: 4px;
        }

        .comment-footer .likes {
            display: flex;
            align-items: center;
            font-size: 12px;
        }

        .comment-footer {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: #B0B3B8;
            margin-top: 5px;
            justify-content: flex-start; /* Canh về bên trái */
            gap: 10px; /* Khoảng cách giữa các phần tử */
        }

        .comment-footer .likes {
            display: flex;
            align-items: center;
            font-size: 12px;
            gap: 5px; /* Khoảng cách giữa icon và số */
        }

        .comment-footer .comment-time {
            color: gray;
            font-size: 12px;
            margin-left: auto; /* Đẩy thời gian về bên phải */
        }

        .commentPage{
            max-height: 500px;
        }

        /* Đảm bảo nội dung không vượt quá chiều cao 500px */
        .content-truncate {
            max-height: 500px;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
        }

        /* Nút Xem thêm và Thu gọn */
        .btn-toggle {
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            margin-top: 10px;
        }

    </style>

    <div class="w-full h-full overflow-y-auto">
        <div class="bg-gray-900 min-h-screen text-white p-6 relative">
            <div class="max-w-3xl mx-auto">
                {# Ô đăng trạng thái #}
                <div class="bg-gray-800 p-4 rounded-lg shadow-md mb-4">
                    <div class="flex items-center space-x-3">
                        <a href="/dashboard/profile/{{ profile.slug }}">
                            <img src="{{ profile.avatar }}" class="w-10 h-10 rounded-full border border-gray-700">
                        </a>
                        <div type="text" placeholder=""
                               class="flex-1 bg-gray-700 text-white p-2 rounded-full outline-none placeholder-gray-400 cursor-pointer"
                             id="openModal">{{ profile.name }} ơi, bạn đang nghĩ gì thế? </div>
                    </div>
                </div>

                <div id="postModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden z-[99999]">
                    <div class="bg-gray-800 p-6 rounded-lg shadow-lg w-96 relative z-[99999]">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-white text-lg font-semibold">Tạo bài viết</h2>
                            <button id="closeModal" class="text-gray-400 hover:text-white text-xl">✖</button>
                        </div>

                        <!-- Form đăng bài -->
                        <form action="{{ path('create_post') }}" method="POST">
            <textarea name="content" id="postContent" class="w-full h-32 p-2 rounded-lg bg-gray-700 text-white"
                      placeholder="Bạn đang nghĩ gì?"></textarea>

                            <!-- Nút đăng bài -->
                            <div class="flex justify-end mt-4">
                                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
                                    Đăng bài
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                {# Danh sách bạn bè #}
                <div class="relative w-full max-w-2xl mx-auto mt-10">
                    <!-- Swiper Container -->
                    <div class="swiper mySwiper">
                        <div class="swiper-wrapper">
                            {# Danh sách bạn bè #}
                            {% for friend in friendList %}
                                <a href="/dashboard/profile/{{ friend.slug }}" class="swiper-slide relative w-32 h-48 bg-gray-800 rounded-xl overflow-hidden shrink-0">
                                    <img src="{{ friend.avatar }}" class="w-full h-full object-cover">
                                    {# Avatar bạn bè #}
                                    <div class="absolute top-2 left-2 w-10 h-10 border-4 border-gray-900 rounded-full overflow-hidden">
                                        <img src="{{ friend.avatar }}" class="w-full h-full object-cover">
                                    </div>
                                    {# Tên bạn bè #}
                                    <div class="absolute bottom-2 left-2 text-sm font-semibold truncate w-full text-center px-2">
                                        {{ friend.name }}
                                    </div>
                                </a>
                            {% endfor %}
                        </div>

                        <!-- Nút bấm trái/phải -->
                        <div class="swiper-button-prev"></div>
                        <div class="swiper-button-next"></div>
                    </div>
                </div>

                {# Modal edit bài viết #}
                <!-- Modal chỉnh sửa bài viết -->
                <div id="editModal">
                    <div class="bg-gray-800 p-6 rounded-lg shadow-lg relative">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-white text-lg font-semibold">Chỉnh sửa bài viết</h2>
                            <button id="closeEditModal" class="text-gray-400 hover:text-white text-xl">✖</button>
                        </div>

                        <!-- Form chỉnh sửa -->
                        <form id="editForm" method="POST">
                            <textarea name="content" id="editContent" class="w-full h-32 p-2 rounded-lg bg-gray-700 text-white"></textarea>

                            <!-- Nút cập nhật -->
                            <div class="flex justify-end mt-4">
                                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
                                    Cập nhật bài viết
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

            </div>
            {# Danh sách bài viết #}
            <div class="bg-gray-900 min-h-screen text-white p-6 h-full">
                <div class="max-w-2xl mx-auto">
                    {% for post in posts %}
                        <div class="bg-gray-800 p-4 rounded-lg shadow-lg mb-6">
                            {# Header bài đăng #}
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <img src="{{ post.avatarAuthor }}" class="w-10 h-10 rounded-full" alt="Avatar của {{ post.authorName }}">
                                    <div>
                                        <p class="font-semibold">{{ post.authorName }}</p>
                                        <p class="text-sm text-gray-400">{{ post.createdAt|date('d/m/Y H:i') }} • 🌍</p>
                                    </div>
                                </div>

                                {# Nút chỉnh sửa & xóa (Chỉ hiển thị nếu là tác giả) #}
                                {% if post.idAuthor == profile.userId %}
                                    <div class="flex space-x-2">
                                        <button class="text-blue-400 hover:text-blue-300 transition" onclick="editPost({{ post.id }})">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="text-red-400 hover:text-red-300 transition" onclick="deletePost({{ post.id }})">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                {% endif %}
                            </div>

                            {# Nội dung bài đăng #}
                            <div class="mt-3 text-gray-300">
                                <div id="post-content-{{ post.id }}" class="content-truncate" style="max-height: 500px; overflow: hidden;">
                                    {{ post.content|raw }}
                                </div>
                                <button id="toggle-btn-{{ post.id }}" class="btn-toggle">Xem thêm</button>
                            </div>

                            {# Lượt thích, bình luận #}
                            <div class="flex justify-between items-center mt-3 text-gray-400 text-sm">
                                <div class="flex items-center space-x-2">
                                    <i class="fas fa-thumbs-up"></i>
                                    <span id="like-display-{{ post.id }}" class="mr-3">{{ post.likes }} lượt thích</span>
                                </div>
                            </div>

                            {# Nút tương tác #}
                            <div class="flex justify-between mt-2 border-t border-gray-600 pt-2">
                                <button id="like-button-{{ post.id }}"
                                        class="flex-1 flex items-center justify-center py-2 rounded-lg transition
                               {% if post.userLiked %} bg-blue-500 text-white {% else %} hover:bg-gray-700 {% endif %}"
                                                        onclick="toggleLike({{ post.id }})">
                                                    <i class="fas fa-thumbs-up mr-3"></i>
                                                    <span id="like-label-{{ post.id }}">
                                        {% if post.userLiked %} Đã thích {% else %} Thích {% endif %}
                                   </span>
                                </button>

                                <button class="flex-1 flex items-center justify-center py-2 rounded-lg hover:bg-gray-700 transition"
                                        onclick="toggleComments({{ post.id }})">
                                    <i class="fas fa-comment-alt mr-3"></i> Bình luận
                                    <span id="comment-count-{{ post.id }}" class="ml-2 text-sm">({{ post.commentCount }})</span>
                                </button>
                            </div>

                            <!-- Khu vực hiển thị bình luận -->
                            <div id="comment-section-{{ post.id }}" class="hidden mt-4">
                                <div id="comments-{{ post.id }}" class="commentPage text-gray-300 p-3 max-h-60 overflow-y-auto"></div>

                                <div class="flex items-center bg-gray-800 p-3 rounded-lg mt-3">
                                    <img src="{{ profile.avatar }}" class="w-10 h-10 rounded-full border border-gray-700">
                                    <input type="text" id="comment-input-{{ post.id }}" class="flex-1 ml-3 bg-gray-700 text-white p-2 rounded-full outline-none" placeholder="Viết bình luận...">
                                    <button class="ml-3 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg" onclick="sendComment({{ post.id }})">Gửi</button>
                                </div>
                            </div>
                        </div>
                    {% else %}
                        <p class="text-center text-gray-400">Không có bài viết nào.</p>
                    {% endfor %}
                </div>
            </div>

        </div>
    </div>
</div>


    <!-- Script TinyMCE và Modal -->
    <script src="https://cdn.tiny.cloud/1/4ap6sni821pn56o84cses0860nmtuvurlwoxovop0j9t37j5/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <!-- Nhúng Swiper CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">

    <!-- Nhúng Swiper JS -->
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

    {#Swiper Init#}
    <script>
        var swiper = new Swiper(".mySwiper", {
            slidesPerView: 4,   // Hiển thị 4 ô bạn bè mỗi lần
            spaceBetween: 15,   // Khoảng cách giữa các ô
            navigation: {       // Nút điều hướng
                nextEl: ".swiper-button-next",
                prevEl: ".swiper-button-prev",
            },
            grabCursor: true,   // Hiệu ứng bàn tay khi rê chuột
            loop: false,        // Không lặp vô hạn
        });
    </script>

    {#Tiny MCE#}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Khởi tạo TinyMCE
            tinymce.init({
                selector: '#postContent',
                menubar: false,
                plugins: 'autolink lists link image charmap preview',
                toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | bullist numlist outdent indent',
                skin: "oxide-dark",
                content_css: "dark",
                setup: function (editor) {
                    editor.on('focus', function () {
                        document.getElementById("postModal").classList.add("z-[9999]");
                    });
                }
            });

            // Modal
            const modal = document.getElementById("postModal");
            const openModal = document.getElementById("openModal");
            const closeModal = document.getElementById("closeModal");

            openModal.addEventListener("click", function () {
                modal.classList.remove("hidden");
            });

            closeModal.addEventListener("click", function () {
                modal.classList.add("hidden");
            });

            // Đóng modal khi click ra ngoài
            modal.addEventListener("click", function (e) {
                if (e.target === modal) {
                    modal.classList.add("hidden");
                }
            });
        });
    </script>

    {#Modal Open/Close#}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const modal = document.getElementById("postModal");
            const openModal = document.getElementById("openModal");
            const closeModal = document.getElementById("closeModal");

            openModal.addEventListener("click", function () {
                modal.classList.remove("hidden");
            });

            closeModal.addEventListener("click", function () {
                modal.classList.add("hidden");
            });

            // Đóng modal khi click ra ngoài
            modal.addEventListener("click", function (e) {
                if (e.target === modal) {
                    modal.classList.add("hidden");
                }
            });
        });
    </script>

    {#Edit Modal#}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const editModal = document.getElementById("editModal");
            const closeEditModal = document.getElementById("closeEditModal");
            const editForm = document.getElementById("editForm");
            let currentPostId = null;

            // Hàm khởi tạo TinyMCE nếu chưa có
            function initTinyMCE(callback) {
                if (!tinymce.get('editContent')) {
                    tinymce.init({
                        selector: '#editContent',
                        menubar: false,
                        plugins: 'autolink lists link image charmap preview',
                        toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | bullist numlist outdent indent',
                        skin: "oxide-dark",
                        content_css: "dark",
                        setup: function (editor) {
                            editor.on('init', function () {
                                console.log("TinyMCE đã khởi tạo");
                                if (callback) callback();
                            });
                        }
                    });
                } else {
                    if (callback) callback();
                }
            }

            // Mở modal chỉnh sửa
            function openEditModal(postId, currentContent) {
                currentPostId = postId;

                // Đảm bảo TinyMCE đã khởi tạo trước khi set nội dung
                initTinyMCE(() => {
                    tinymce.get('editContent').setContent(currentContent);
                });

                // Hiển thị modal ở chính giữa màn hình
                editModal.style.display = "block";
            }

            // Đóng modal chỉnh sửa
            closeEditModal.addEventListener("click", function () {
                editModal.style.display = "none";
            });

            // Gửi request cập nhật bài viết bằng AJAX
            editForm.addEventListener("submit", function (e) {
                e.preventDefault(); // Ngăn chặn load lại trang

                const newContent = tinymce.get('editContent').getContent(); // Lấy nội dung từ TinyMCE

                fetch(`/post/edit/${currentPostId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ content: newContent }),
                })
                    .then(response => response.json())
                    .then(data => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành công!',
                            text: data.message,
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            editModal.style.display = "none"; // Ẩn modal sau khi chỉnh sửa
                            window.location.href = "/dashboard/news"; // Quay lại trang tin tức
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: "Có lỗi xảy ra khi chỉnh sửa bài viết.",
                            showConfirmButton: true
                        });
                        console.error("Lỗi:", error);
                    });
            });

            // Hàm mở modal chỉnh sửa từ nút "Chỉnh sửa"
            window.editPost = function (postId) {
                fetch(`/post/${postId}`)
                    .then(response => response.json())
                    .then(data => {
                        openEditModal(postId, data.content);
                    })
                    .catch(error => console.error("Lỗi khi lấy nội dung bài viết:", error));
            };
        });

        function deletePost(postId) {
            Swal.fire({
                title: "Bạn có chắc chắn muốn xóa bài viết?",
                text: "Hành động này không thể hoàn tác!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Xóa",
                cancelButtonText: "Hủy"
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/post/delete/${postId}`, {
                        method: "DELETE",
                    })
                        .then(response => response.json())
                        .then(data => {
                            Swal.fire({
                                icon: 'success',
                                title: 'Thành công!',
                                text: data.message,
                                timer: 2000,
                                showConfirmButton: false
                            }).then(() => {
                                location.reload(); // Làm mới trang sau khi xóa
                            });
                        })
                        .catch(error => {
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi!',
                                text: "Có lỗi xảy ra khi xóa bài viết.",
                                showConfirmButton: true
                            });
                            console.error("Lỗi:", error);
                        });
                }
            });
        }
    </script>

    {#Toggle Like#}
    <script>
        function toggleLike(postId) {
            fetch(`/post/like/${postId}`, { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        alert(data.message);
                        return;
                    }

                    // Lấy các phần tử HTML cần cập nhật
                    const likeButton = document.getElementById(`like-button-${postId}`);
                    const likeLabel = document.getElementById(`like-label-${postId}`);
                    const likeDisplay = document.getElementById(`like-display-${postId}`);

                    // Kiểm tra nếu các phần tử tồn tại trước khi cập nhật
                    if (likeDisplay) {
                        likeDisplay.innerText = `${data.likeCount} lượt thích`; // Cập nhật số lượt thích
                    }
                    if (likeButton && likeLabel) {
                        if (data.userLiked) {
                            likeButton.classList.add("bg-blue-500", "text-white"); // Đổi màu xanh khi đã thích
                            likeButton.classList.remove("hover:bg-gray-700");
                            likeLabel.innerText = "Đã thích"; // Đổi text thành "Đã thích"
                        } else {
                            likeButton.classList.remove("bg-blue-500", "text-white"); // Trả về màu gốc
                            likeButton.classList.add("hover:bg-gray-700");
                            likeLabel.innerText = "Thích"; // Đổi text thành "Thích"
                        }
                    }
                })
                .catch(error => console.error("Lỗi khi like bài viết:", error));
        }
    </script>

    {#SHOW COMMENT#}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function toggleComments(postId) {
                let commentSection = document.getElementById(`comment-section-${postId}`);

                if (commentSection.classList.contains("hidden")) {
                    commentSection.classList.remove("hidden");

                    fetch(`/post/comments/${postId}`)
                        .then(response => response.json())
                        .then(data => {
                            let commentsContainer = document.getElementById(`comments-${postId}`);
                            commentsContainer.innerHTML = ""; // Xóa bình luận cũ trước khi tải mới

                            data.comments.forEach(comment => {
                                let date = new Date(comment.createdAt);
                                let formattedDate = date.toLocaleDateString("vi-VN", {
                                    day: "2-digit",
                                    month: "2-digit",
                                    year: "numeric"
                                });

                                const commentElement = document.createElement("div");
                                commentElement.classList.add("flex", "items-start", "space-x-3", "bg-gray-700", "p-3", "rounded-lg");

                                commentElement.innerHTML = `
                        <img src="${comment.authorAvatar}" class="w-10 h-10 rounded-full border border-gray-600">
                        <div class="flex flex-col">
                            <span class="font-semibold text-white">${comment.authorName}</span>
                            <p class="text-gray-300">${comment.content}</p>
                            <div class="flex items-center space-x-4 text-gray-400 text-sm mt-2">
                                <button class="hover:text-blue-400 transition" onclick="likeComment(${comment.id})">
                                    <i class="fas fa-thumbs-up"></i> Thích
                                </button>
                                <div class="flex items-center">
                                    <i class="fas fa-smile mr-3"></i>
                                    <span id="like-count-${comment.id}" class="ml-1">${comment.likes}</span>
                                    <span class="ml-4 text-sm font-semibold">${formattedDate}</span>
                                </div>
                            </div>
                        </div>
                    `;

                                commentsContainer.appendChild(commentElement);
                            });

                            // Cuộn xuống bình luận mới nhất
                            setTimeout(() => {
                                commentsContainer.scrollTop = commentsContainer.scrollHeight;
                            }, 100);
                        })
                        .catch(error => console.error("Lỗi khi lấy danh sách bình luận:", error));
                } else {
                    commentSection.classList.add("hidden");
                }
            }

            window.toggleComments = toggleComments;

            function sendComment(postId) {
                let commentInput = document.getElementById(`comment-input-${postId}`);
                let commentContent = commentInput.value.trim();

                if (!commentContent) return;

                fetch(`/post/comment/${postId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ content: commentContent }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            commentInput.value = ""; // Xóa nội dung trong ô nhập bình luận

                            let commentsContainer = document.getElementById(`comments-${postId}`);

                            // Chuyển đổi định dạng ngày (YYYY-MM-DD HH:mm:ss => DD/MM/YYYY)
                            let date = new Date(data.createdAt);
                            let formattedDate = date.toLocaleDateString("vi-VN", {
                                day: "2-digit",
                                month: "2-digit",
                                year: "numeric"
                            });

                            // Tạo phần tử bình luận mới
                            const newComment = document.createElement("div");
                            newComment.classList.add("comment-item");

                            newComment.innerHTML = `
                    <img src="${data.authorAvatar}" class="w-10 h-10 rounded-full border border-gray-700">
                    <div class="comment-content">
                        <div class="comment-header">
                            <span class="font-semibold text-white">${data.authorName}</span>
                        </div>
                        <p class="comment-text text-gray-300">${data.content}</p>
                        <div class="comment-footer flex items-center space-x-4">
                            <button class="text-blue-400 hover:text-blue-500 transition" onclick="likeComment(${data.id})">
                                <i class="fas fa-thumbs-up"></i> Thích
                            </button>
                            <div class="likes flex items-center text-gray-400">
                                <i class="fas fa-smile"></i>
                                <span id="like-count-${data.id}" class="ml-1">0</span>
                                <span class="ml-4 text-sm font-semibold text-gray-300">${formattedDate}</span>
                            </div>
                        </div>
                    </div>
                `;

                            commentsContainer.appendChild(newComment); // ✅ Thêm bình luận mới vào danh sách

                            // Cuộn xuống bình luận mới nhất
                            setTimeout(() => {
                                commentsContainer.scrollTop = commentsContainer.scrollHeight;
                            }, 100);
                        } else {
                            alert("Có lỗi xảy ra khi bình luận!");
                        }
                    })
                    .catch(error => console.error("Lỗi khi gửi bình luận:", error));
            }

            window.sendComment = sendComment;

            function likeComment(commentId) {
                fetch(`/post/comment/like/${commentId}`, { method: "POST" })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            let likeCount = document.getElementById(`like-count-${commentId}`);
                            likeCount.innerText = data.likes; // ✅ Cập nhật số lượt thích
                        }
                    })
                    .catch(error => console.error("Lỗi khi like bình luận:", error));
            }

            window.likeComment = likeComment;
        });
    </script>

    {#SEE MORE#}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            {% for post in posts %}
            (function() {
                const toggleBtn = document.getElementById('toggle-btn-{{ post.id }}');
                const postContent = document.getElementById('post-content-{{ post.id }}');
                let isExpanded = false;

                // Đảm bảo rằng các phần tử tồn tại trước khi thao tác
                if (!toggleBtn || !postContent) return;

                // Kiểm tra chiều cao của nội dung và ẩn nút nếu cần thiết
                if (postContent.scrollHeight <= 500) {
                    toggleBtn.style.display = 'none';  // Ẩn nút "Xem thêm" nếu chiều cao nhỏ hơn hoặc bằng 500px
                } else {
                    toggleBtn.style.display = 'block'; // Hiển thị nút "Xem thêm" nếu chiều cao vượt quá 500px
                }

                // Xử lý sự kiện khi nhấn nút "Xem thêm" hoặc "Thu gọn"
                toggleBtn.addEventListener('click', () => {
                    if (isExpanded) {
                        // Nếu đang mở rộng, thu gọn lại
                        postContent.style.maxHeight = '500px';
                        toggleBtn.textContent = 'Xem thêm';
                    } else {
                        // Nếu đang thu gọn, mở rộng nội dung
                        postContent.style.maxHeight = 'none';
                        toggleBtn.textContent = 'Thu gọn';
                    }

                    // Đổi trạng thái mở rộng hay thu gọn
                    isExpanded = !isExpanded;
                });
            })();
            {% endfor %}
        });
    </script>

    {# Include Alert Component #}
    {% include 'components/alert.html.twig' %}

{% endblock %}