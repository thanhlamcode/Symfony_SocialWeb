<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Call</title>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
</head>
<body>
<h2>Video Call</h2>
<video id="localVideo" autoplay playsinline></video>
<video id="remoteVideo" autoplay playsinline></video>
<button id="endCallBtn">End Call</button>

<script>
    const socket = io('{{ websocket_url }}');
    const urlParams = new URLSearchParams(window.location.search);
    const senderId = urlParams.get("senderId");
    const receiverId = urlParams.get("receiverId");

    let peerConnection;
    const config = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

    socket.on("connect", () => {
        console.log(`âœ… Connected to WebSocket as user: ${senderId}`);
        socket.emit("register_user", senderId);
    });

    async function startCall() {
        peerConnection = new RTCPeerConnection(config);
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        document.getElementById("localVideo").srcObject = stream;
        stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));

        peerConnection.ontrack = (event) => {
            document.getElementById("remoteVideo").srcObject = event.streams[0];
        };

        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit("ice_candidate", { candidate: event.candidate, receiverId });
            }
        };

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit("offer", { offer, senderId, receiverId });
    }

    socket.on("offer", async ({ offer, senderId }) => {
        if (!peerConnection) startCall();
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit("answer", { answer, receiverId: senderId });
    });

    socket.on("answer", ({ answer }) => {
        peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on("ice_candidate", ({ candidate }) => {
        peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });

    document.getElementById("endCallBtn").addEventListener("click", () => {
        socket.emit("end_call", { senderId, receiverId });
        peerConnection.close();
        window.close();
    });

    socket.on("call_ended", () => {
        peerConnection.close();
        window.close();
    });

    startCall();
</script>
</body>
</html>
