{% extends 'dashboard.html.twig' %}

{% block chat_content %}
    <div class="w-full sm:w-[70%] bg-gray-900 p-6 text-white flex flex-col h-screen">
        <div class="bg-gray-800 p-4 rounded-lg flex items-center justify-between shadow-md">
            <div>
                <h2 class="text-xl font-bold">{{ receiver.name }}</h2>
                <p class="text-sm text-gray-400">Active now</p>
            </div>
            <div class="flex space-x-4">
                <!-- N√∫t g·ªçi tho·∫°i -->
                <button id="audioCallBtn" class="bg-green-500 p-5 rounded-full hover:bg-green-600 transition flex items-center justify-center w-16 h-16">
                    <img src="{{ asset('icons/phone.png') }}" class="w-8 h-8" alt="Audio Call">
                </button>

                <!-- N√∫t g·ªçi video -->
                <button id="videoCallBtn" class="bg-blue-500 p-5 rounded-full hover:bg-blue-600 transition flex items-center justify-center w-16 h-16">
                    <img src="{{ asset('icons/video.png') }}" class="w-8 h-8" alt="Video Call">
                </button>
            </div>
        </div>

        <div class="flex-1 overflow-y-auto space-y-6 p-4 main-chat">
            {% for message in current_chat.messages %}
                {% if message.senderId == user.id %}
                    {# Tin nh·∫Øn c·ªßa user (b√™n ph·∫£i) #}
                    <div class="flex items-start space-x-3 justify-end">
                        <div class="bg-blue-500 p-3 rounded-lg max-w-md">
                            <p class="text-sm font-bold">{{ user.name }}</p>
                            <p class="mt-1">{{ message.text }}</p>
                            <div class="flex space-x-2 text-gray-300 text-xs mt-1">
                                <span>{{ message.time }}</span>
                            </div>
                        </div>
                        <img src="{{ user.avatar }}" class="w-10 h-10 rounded-full">
                    </div>
                {% else %}
                    {# Tin nh·∫Øn c·ªßa ng∆∞·ªùi nh·∫≠n (b√™n tr√°i) #}
                    <div class="flex items-start space-x-3">
                        <img src="{{ receiver.avatar }}" class="w-10 h-10 rounded-full">
                        <div class="bg-gray-700 p-3 rounded-lg max-w-md">
                            <p class="text-sm font-bold">{{ receiver.name }}</p>
                            <p class="mt-1">{{ message.text }}</p>
                            <div class="flex space-x-2 text-gray-400 text-xs mt-1">
                                <span>{{ message.time }}</span>
                            </div>
                        </div>
                    </div>
                {% endif %}
            {% endfor %}
        </div>

        <div class="bg-gray-800 p-4 rounded-lg flex items-center">
            <form action="{{ path('send_message', {'id': receiver.userId}) }}" method="POST" class="w-full flex items-center">
                <input type="text" name="message" placeholder="Your message"
                       class="w-full p-2 bg-gray-700 rounded-lg border border-gray-600 text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-400 mx-4" required>
                <button type="submit" class="bg-blue-500 p-2 rounded-lg hover:bg-blue-600 transition">
                    <img src="{{ asset('icons/send.png') }}" class="w-6 h-6">
                </button>
            </form>
        </div>
        <!-- Pop-up cu·ªôc g·ªçi -->
        <div id="callPopup" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
            <div class="bg-gray-900 p-6 rounded-lg shadow-lg w-[500px] flex flex-col items-center">
                <h2 class="text-xl font-bold text-white mb-4">ƒêang g·ªçi {{ receiver.name }}...</h2>
                <video id="localVideo" class="w-full h-[300px] bg-black rounded-md" autoplay></video>
                <video id="remoteVideo" class="w-full h-[300px] bg-black rounded-md hidden" autoplay></video>
                <button id="endCallBtn" class="mt-4 bg-red-500 p-3 rounded-full hover:bg-red-600 transition">
                    <img src="{{ asset('icons/end-call.png') }}" class="w-8 h-8" alt="End Call">
                </button>
            </div>
        </div>
        <div id="callNotification" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
            <div class="bg-gray-900 p-6 rounded-lg shadow-lg w-[400px] flex flex-col items-center">
                <h2 id="callerName" class="text-xl font-bold text-white mb-4">üìû Cu·ªôc g·ªçi ƒë·∫øn t·ª´...</h2>
                <button id="acceptCallBtn" class="bg-green-500 p-3 rounded-lg text-white hover:bg-green-600 transition">
                    Nh·∫≠n cu·ªôc g·ªçi
                </button>
            </div>
        </div>
    </div>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    {#HATTING REALTIME#}
    <script>
        // K·∫øt n·ªëi ƒë·∫øn server WebSocket
        const socket = io('{{ websocket_url }}');

        // G·ª≠i tin nh·∫Øn khi form ƒë∆∞·ª£c submit
        const form = document.querySelector('form');
        const inputMessage = document.querySelector('input[name="message"]');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const message = inputMessage.value;

            // G·ª≠i tin nh·∫Øn qua WebSocket
            socket.emit('send_message', {
                senderId: {{ user.id }},
                receiverId: {{ receiver.userId }},
                text: message,
                time: new Date().toLocaleTimeString(),
                userName: '{{ user.name }}',
                receiverName: '{{ receiver.name }}',
                userAvatar: '{{ user.avatar }}',
                receiverAvatar: '{{ receiver.avatar }}'
            });

            // G·ªçi API Symfony ƒë·ªÉ l∆∞u v√†o database
            // G·ª≠i tin nh·∫Øn v√†o c∆° s·ªü d·ªØ li·ªáu qua API Symfony
            await sendMessageToBackend(message);

            // X√≥a n·ªôi dung input
            inputMessage.value = '';
        });

        // L·∫Øng nghe tin nh·∫Øn t·ª´ server v√† ch·ªâ hi·ªÉn th·ªã n·∫øu l√† tin nh·∫Øn li√™n quan
        socket.on("receive_message", (message) => {
            if (message.senderId !== {{ user.id }} && message.receiverId !== {{ user.id }}) {
                return; // Kh√¥ng hi·ªÉn th·ªã tin nh·∫Øn kh√¥ng li√™n quan
            }

            const messagesContainer = document.querySelector('.main-chat');
            const messageElement = document.createElement('div');
            messageElement.classList.add('flex', 'items-start', 'space-x-3');

            // Hi·ªÉn th·ªã tin nh·∫Øn g·ª≠i t·ª´ ch√≠nh m√¨nh ho·∫∑c t·ª´ ng∆∞·ªùi kh√°c
            if (message.senderId === {{ user.id }}) {
                messageElement.classList.add('justify-end');
                messageElement.innerHTML = `
            <div class="bg-blue-500 p-3 rounded-lg max-w-md">
                <p class="text-sm font-bold">${message.userName}</p>
                <p class="mt-1">${message.text}</p>
                <div class="flex space-x-2 text-gray-300 text-xs mt-1">
                    <span>${message.time}</span>
                </div>
            </div>
            <img src="${message.userAvatar}" class="w-10 h-10 rounded-full">
        `;
            } else {
                messageElement.innerHTML = `
            <img src="${message.receiverAvatar}" class="w-10 h-10 rounded-full">
            <div class="bg-gray-700 p-3 rounded-lg max-w-md">
                <p class="text-sm font-bold">${message.receiverName}</p>
                <p class="mt-1">${message.text}</p>
                <div class="flex space-x-2 text-gray-400 text-xs mt-1">
                    <span>${message.time}</span>
                </div>
            </div>
        `;
            }

            // Th√™m tin nh·∫Øn v√†o container
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });


        // H√†m g·ª≠i tin nh·∫Øn v√†o backend Symfony ƒë·ªÉ l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
        async function sendMessageToBackend(message) {
            try {
                const response = await fetch("{{ path('send_message', {'id': receiver.userId}) }}", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message
                    })
                });

                if (!response.ok) {
                    console.error('Error sending message to backend');
                }
            } catch (error) {
                console.error('Error:', error);
            }}

        // H√†m cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t khi t·∫£i trang
        function scrollToBottom() {
            const messagesContainer = document.querySelector('.main-chat');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // G·ªçi h√†m khi trang t·∫£i xong
        window.onload = scrollToBottom;
    </script>
    {#VIDEO CALL#}
    <script>
        let callWindow = null;  // Bi·∫øn l∆∞u tr·ªØ c·ª≠a s·ªï cu·ªôc g·ªçi
        let peerConnection;
        const config = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

        // üü¢ ƒêƒÉng k√Ω user v·ªõi WebSocket khi k·∫øt n·ªëi
        socket.on("connect", () => {
            console.log(`‚úÖ Connected to WebSocket as user: {{ profile.userId }}`);
            socket.emit("register_user", {{ profile.userId }}); // ƒêƒÉng k√Ω ID ch√≠nh x√°c
        });

        // üü¢ Khi nh·∫•n n√∫t g·ªçi video, g·ª≠i y√™u c·∫ßu cu·ªôc g·ªçi v√† m·ªü c·ª≠a s·ªï g·ªçi
        document.getElementById("videoCallBtn").addEventListener("click", () => {
            console.log("üìû G·ª≠i y√™u c·∫ßu g·ªçi...");

            socket.emit("start_call", {
                senderId: {{ profile.userId }},
                receiverId: {{ receiver.userId }},
                senderName: "{{ profile.name }}"
            });

            // N·∫øu ch∆∞a c√≥ c·ª≠a s·ªï cu·ªôc g·ªçi, m·ªü m·ªõi
            if (!callWindow || callWindow.closed) {
                callWindow = window.open(`/call?senderId={{ profile.userId }}&receiverId={{ receiver.userId }}`, "_blank", "width=800,height=600");
            }
        });

        // üü¢ Hi·ªÉn th·ªã pop-up khi c√≥ cu·ªôc g·ªçi ƒë·∫øn
        socket.on("incoming_call", ({ senderId, senderName }) => {
            console.log(`üìû Nh·∫≠n cu·ªôc g·ªçi t·ª´ ${senderName} (ID: ${senderId})`);

            // ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t t√™n ng∆∞·ªùi g·ªçi
            const callerNameElement = document.getElementById("callerName");
            if (callerNameElement) {
                callerNameElement.innerText = senderName;
            }

            // Hi·ªÉn th·ªã popup nh·∫≠n cu·ªôc g·ªçi
            document.getElementById("callNotification").classList.remove("hidden");

            // Tr√°nh g√°n s·ª± ki·ªán nhi·ªÅu l·∫ßn
            const acceptCallBtn = document.getElementById("acceptCallBtn");

            // X√≥a s·ª± ki·ªán tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
            acceptCallBtn.replaceWith(acceptCallBtn.cloneNode(true));
            const newAcceptCallBtn = document.getElementById("acceptCallBtn");

            newAcceptCallBtn.addEventListener("click", () => {
                document.getElementById("callNotification").classList.add("hidden");

                // N·∫øu ch∆∞a c√≥ c·ª≠a s·ªï cu·ªôc g·ªçi, m·ªü m·ªõi
                if (!callWindow || callWindow.closed) {
                    callWindow = window.open(`/call?senderId={{ profile.userId }}&receiverId=${senderId}`, "_blank", "width=800,height=600");
                }
            });
        });


        // üõë Khi cu·ªôc g·ªçi k·∫øt th√∫c
        socket.on("call_ended", () => {
            console.log("üö´ Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c.");
            if (peerConnection) {
                peerConnection.close();
            }

            // Ki·ªÉm tra n·∫øu c·ª≠a s·ªï cu·ªôc g·ªçi v·∫´n t·ªìn t·∫°i, ƒë√≥ng l·∫°i
            if (callWindow && !callWindow.closed) {
                callWindow.close();
            }

            // ƒê·∫£m b·∫£o popup ƒë∆∞·ª£c reset cho cu·ªôc g·ªçi ti·∫øp theo
            document.getElementById("callNotification").classList.add("hidden");
        });


    </script>

{% endblock %}
