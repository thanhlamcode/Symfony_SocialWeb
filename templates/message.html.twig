{% extends 'dashboard.html.twig' %}

{% block chat_content %}
    <div class="w-full sm:w-[70%] bg-gray-900 p-6 text-white flex flex-col h-screen">
        <div class="bg-gray-800 p-4 rounded-lg flex items-center justify-between shadow-md">
            <div>
                <h2 class="text-xl font-bold">{{ receiver.name }}</h2>
                <p class="text-sm text-gray-400">Active now</p>
            </div>
        </div>

        <div class="flex-1 overflow-y-auto space-y-6 p-4">
            {% for message in current_chat.messages %}
                {% if message.senderId == user.id %}
                    {# Tin nhắn của user (bên phải) #}
                    <div class="flex items-start space-x-3 justify-end">
                        <div class="bg-blue-500 p-3 rounded-lg max-w-md">
                            <p class="text-sm font-bold">{{ user.name }}</p>
                            <p class="mt-1">{{ message.text }}</p>
                            <div class="flex space-x-2 text-gray-300 text-xs mt-1">
                                <span>{{ message.time }}</span>
                            </div>
                        </div>
                        <img src="{{ user.avatar }}" class="w-10 h-10 rounded-full">
                    </div>
                {% else %}
                    {# Tin nhắn của người nhận (bên trái) #}
                    <div class="flex items-start space-x-3">
                        <img src="{{ receiver.avatar }}" class="w-10 h-10 rounded-full">
                        <div class="bg-gray-700 p-3 rounded-lg max-w-md">
                            <p class="text-sm font-bold">{{ receiver.name }}</p>
                            <p class="mt-1">{{ message.text }}</p>
                            <div class="flex space-x-2 text-gray-400 text-xs mt-1">
                                <span>{{ message.time }}</span>
                            </div>
                        </div>
                    </div>
                {% endif %}
            {% endfor %}
        </div>

        <div class="bg-gray-800 p-4 rounded-lg flex items-center">
            <form action="{{ path('send_message', {'id': receiver.userId}) }}" method="POST" class="w-full flex items-center">
                <input type="text" name="message" placeholder="Your message"
                       class="w-full p-2 bg-gray-700 rounded-lg border border-gray-600 text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-400 mx-4" required>
                <button type="submit" class="bg-blue-500 p-2 rounded-lg hover:bg-blue-600 transition">
                    <img src="{{ asset('icons/send.png') }}" class="w-6 h-6">
                </button>
            </form>
        </div>
    </div>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <script>
        // Kết nối đến server WebSocket
        const socket = io('http://localhost:3000');

        // Gửi tin nhắn khi form được submit
        const form = document.querySelector('form');
        const inputMessage = document.querySelector('input[name="message"]');

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = inputMessage.value;

            // Gửi tin nhắn qua WebSocket
            socket.emit('send_message', {
                senderId: {{ user.id }},
                receiverId: {{ receiver.userId }},
                text: message,
                time: new Date().toLocaleTimeString(),
                userName: '{{ user.name }}',
                receiverName: '{{ receiver.name }}',
                userAvatar: '{{ user.avatar }}',
                receiverAvatar: '{{ receiver.avatar }}'
            });

            // Xóa nội dung input
            inputMessage.value = '';
        });

        // Lắng nghe sự kiện nhận tin nhắn từ server và hiển thị tin nhắn mới
        socket.on('receive_message', (message) => {
            const messagesContainer = document.querySelector('.flex-1');
            const messageElement = document.createElement('div');
            messageElement.classList.add('flex', 'items-start', 'space-x-3');

            // Hiển thị tin nhắn gửi từ người dùng hiện tại hoặc người nhận
            if (message.senderId === {{ user.id }}) {
                messageElement.classList.add('justify-end');
                messageElement.innerHTML = `
                <div class="bg-blue-500 p-3 rounded-lg max-w-md">
                    <p class="text-sm font-bold">${message.userName}</p>
                    <p class="mt-1">${message.text}</p>
                    <div class="flex space-x-2 text-gray-300 text-xs mt-1">
                        <span>${message.time}</span>
                    </div>
                </div>
                <img src="${message.userAvatar}" class="w-10 h-10 rounded-full">
            `;
            } else {
                messageElement.innerHTML = `
                <img src="${message.receiverAvatar}" class="w-10 h-10 rounded-full">
                <div class="bg-gray-700 p-3 rounded-lg max-w-md">
                    <p class="text-sm font-bold">${message.receiverName}</p>
                    <p class="mt-1">${message.text}</p>
                    <div class="flex space-x-2 text-gray-400 text-xs mt-1">
                        <span>${message.time}</span>
                    </div>
                </div>
            `;
            }

            // Thêm tin nhắn vào container
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;  // Cuộn xuống dưới cùng khi có tin nhắn mới
        });
    </script>
{% endblock %}
